name: "Step 1: Train Model"

on:
  workflow_dispatch:

jobs:
  train-model-deploy:
    runs-on: ubuntu-latest
    outputs:
      location: ${{ steps.read-yaml.outputs.location }}
      resource_group: ${{ steps.read-yaml.outputs.resource_group }}
      aml_workspace: ${{ steps.read-yaml.outputs.aml_workspace }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install PyYAML
        run: pip install pyyaml

      - name: Read environment variables from the YAML config file (dev or prod)
        id: read-yaml
        run: python mlops/templates/github-workflows/parse_yaml.py config-infra-dev.yml

      - name: Use environment variables in another job
        run: echo "The VM image is ${{ steps.read-yaml.outputs.ap_vm_image }} located in ${{ steps.read-yaml.outputs.location }} with postfix ${{ steps.read-yaml.outputs.postfix }}"

      #login using AZ CLI
      - name: "Az CLI login"
        uses: azure/login@v2
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
          enable-AzPSSession: true

      #install AZ ML CLI libraries
      - name: install-extension
        run: az extension add -n ml -y
      - name: update-extension
        run: az extension update -n ml
      - name: list-extentions
        run: az extension list

      # Step 1: Register training environment
      - name: create-environment-from-conda-file
        run: |
          az ml environment create --file ${{ github.workspace }}/mlops/azureml/train/train-env.yml --resource-group ${{ steps.read-yaml.outputs.resource_group }} \
          --workspace-name  ${{ steps.read-yaml.outputs.aml_workspace }} --conda-file ${{ github.workspace }}/data-science/environment/train-conda.yml
      
      # Step 2: Register dataset
      - name: register-dataset
        run: |
          az ml data create --file ${{ github.workspace }}/mlops/azureml/train/data.yml --resource-group ${{ steps.read-yaml.outputs.resource_group }} \
          --workspace-name ${{ steps.read-yaml.outputs.aml_workspace }} --name taxi-data
      
      # Step 3: Create a compute instance
      - name: create-compute-instance
        run: |
          az ml compute create --name cpu-cluster \
                                  --type AmlCompute \
                                  --tier low_priority \
                                  --size Standard_DS3_v2 \
                                  --min-instances 0 \
                                  --max-instances 4 \
                                  --resource-group  ${{ steps.read-yaml.outputs.resource_group }} \
                                  --workspace-name ${{ steps.read-yaml.outputs.aml_workspace }}

      # Step 3: Train the model
      - name: train-model
        run: |
          run_id=$(az ml job create --file ${{ github.workspace }}/mlops/azureml/train/pipeline.yml --resource-group ${{ steps.read-yaml.outputs.resource_group }} --workspace-name ${{ steps.read-yaml.outputs.aml_workspace }} --query name -o tsv)
          if [[ -z "$run_id" ]]
          then
            echo "Job creation failed"
            exit 3
          fi
          az ml job show -n $run_id --resource-group ${{ steps.read-yaml.outputs.resource_group }} --workspace-name ${{ steps.read-yaml.outputs.aml_workspace }} --web 
          status=$(az ml job show -n $run_id --resource-group ${{ steps.read-yaml.outputs.resource_group }} --workspace-name ${{ steps.read-yaml.outputs.aml_workspace }} --query status -o tsv)
          if [[ -z "$status" ]]
          then
            echo "Status query failed"
            exit 4
          fi
          running=("NotStarted" "Queued" "Starting" "Preparing" "Running" "Finalizing" "CancelRequested")
          while [[ ${running[*]} =~ $status ]]
          do
            sleep 15 
            status=$(az ml job show -n $run_id --resource-group ${{ steps.read-yaml.outputs.resource_group }} --workspace-name ${{ steps.read-yaml.outputs.aml_workspace }} --query status -o tsv)
            echo $status
          done
          if [[ "$status" != "Completed" ]]  
          then
            echo "Training Job failed or canceled"
            exit 3
          fi